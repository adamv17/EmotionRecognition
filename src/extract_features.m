function [afe_features, idxs, names] = extract_features(ads, fs)
%extract_features calculates the spectral, prosodic and cepstral features
%of the speech signal. returns a cell matrix for each speech segment with
%its corresponding features
%   Detailed explanation goes here
ms = 30;
w = round((ms/1000) * fs);
window = ones(w,1);
op = 0.5;
overlap = round(w*op);

afe = audioFeatureExtractor("SampleRate", fs, ...
                            "SpectralDescriptorInput","melSpectrum", ...
                            "Window", window, ...
                            "OverlapLength", overlap, ... 
                            "spectralCentroid", true, ...
                            "spectralCrest", true, ...
                            "spectralDecrease", true, ...
                            "spectralEntropy", true, ...
                            "spectralFlatness", true, ...
                            "spectralFlux", true, ...
                            "spectralKurtosis", true, ...
                            "spectralRolloffPoint", true, ...
                            "spectralSkewness", true, ...
                            "spectralSlope", true, ...
                           	"spectralSpread", true, ...
                            "mfcc", true, ...
                            "mfccDelta", true, ...
                            "mfccDeltaDelta", false, ...
                            "harmonicRatio", true, ...
                            "pitch",true);
                        

                        
for f = 1:length(ads.UnderlyingDatastore.Files)
    file = read(ads);
    afe_features{1,f} = extract(afe,file);
    [~,c] = size(afe_features{1,f});
    i = 1;
    for s = 1:floor(length(file)/overlap)-1
        afe_features{1,f}(i,c+1) = short_time_energy(file(overlap*(s-1)+1:overlap*(s+1)));
        afe_features{1,f}(i,c+2) = zcr(file(overlap*(s-1)+1:overlap*(s+1)));
        i = i + 1;
    end
end


[idxs, ~] = info(afe);
names = fieldnames(idxs);
num_names = size(names,1);
names{num_names+1,1} = 'shortTimeEnergy';
names{num_names+2,1} = 'zcr';
name = names{end-2,1};
lastidx = eval(['idxs.' name]);
idxs.shortTimeEnergy = lastidx+1;
idxs.zcr = lastidx+2;
end

